from flask import Flask, render_template, request, redirect, url_for, jsonify, flash
import sqlite3
import random
from datetime import datetime, timedelta
import os
from werkzeug.utils import secure_filename
from threading import Thread
import subprocess
import telethon
import logging
import subprocess
from flask import flash, redirect, render_template, request, url_for
import subprocess
import telethon
import sys
from apscheduler.schedulers.background import BackgroundScheduler
import psutil

# –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –∫–æ–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = BackgroundScheduler()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


app = Flask(__name__)
app.secret_key = os.urandom(24).hex()
bot_running = False
parser_process = None

#
# –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    conn = sqlite3.connect('participants.db', detect_types=sqlite3.PARSE_DECLTYPES)
    conn.row_factory = sqlite3.Row
    return conn






# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = get_db_connection()
    cursor = conn.cursor()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä –∏ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä SQLite –¥–ª—è datetime.date
    sqlite3.register_adapter(datetime.date, lambda date: date.isoformat())
    sqlite3.register_converter("DATE", lambda b: datetime.datetime.strptime(b.decode('ascii'), "%Y-%m-%d").date())

    # –¢–∞–±–ª–∏—Ü–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS parsed_data (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            group_name TEXT,
            user_id INTEGER,
            first_name TEXT,
            last_name TEXT,
            username TEXT,
            total_contacts INTEGER DEFAULT 0,
            total_members INTEGER DEFAULT 1, 
            collected_date DATE DEFAULT (date('now'))
        )
    ''')

    # ‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id TEXT,
            username TEXT,
            iteration INTEGER,
            message_text TEXT,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    # ‚úÖ –¢–∞–±–ª–∏—Ü–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è "–ü–∞–Ω–µ–ª–∏ —Å–±–æ—Ä–∫–∏"
    cursor.execute(''' 
        CREATE TABLE IF NOT EXISTS message_templates (
            iteration INTEGER PRIMARY KEY,
            message_type TEXT DEFAULT 'text',
            message_content TEXT DEFAULT NULL,
            wait_for_reply INTEGER DEFAULT 0,
            file_path TEXT DEFAULT NULL,
            video_category TEXT DEFAULT NULL-- ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        )
    ''')
    
     # –¢–∞–±–ª–∏—Ü–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS sender_bot_settings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            start_datetime TEXT,
            contacts_count INTEGER,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
""")
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã sender_status, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS sender_status (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        status TEXT DEFAULT 'idle',
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    
    
    
     # –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    cursor.execute(''' 
        CREATE TABLE IF NOT EXISTS sender_bot_settings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            send_period INTEGER,
            contacts_count INTEGER,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    conn.commit()
    conn.close()



MAX_HISTORY_LENGTH = 20 
    
    

# üü¢ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
from datetime import datetime, timedelta
def get_statistics():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    conn = get_db_connection()
    cursor = conn.cursor()

    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø
    cursor.execute("SELECT COUNT(DISTINCT group_name) FROM parsed_data")
    total_groups = cursor.fetchone()[0]

    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    cursor.execute("SELECT SUM(total_contacts) FROM parsed_data")
    total_contacts = cursor.fetchone()[0] or 0

    # –ö–æ–Ω—Ç–∞–∫—Ç—ã –∑–∞ –¥–µ–Ω—å
    today = datetime.now().date()
    cursor.execute("SELECT SUM(total_contacts) FROM parsed_data WHERE collected_date = ?", (today,))
    contacts_today = cursor.fetchone()[0] or 0

    # –ö–æ–Ω—Ç–∞–∫—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é
    start_of_week = today - timedelta(days=today.weekday())
    cursor.execute("SELECT SUM(total_contacts) FROM parsed_data WHERE collected_date >= ?", (start_of_week,))
    contacts_this_week = cursor.fetchone()[0] or 0

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º
    cursor.execute("SELECT group_name, total_contacts, total_members FROM parsed_data")
    group_stats = cursor.fetchall()

    conn.close()

    return {
        "total_groups": total_groups,
        "total_contacts": total_contacts,
        "contacts_today": contacts_today,
        "contacts_this_week": contacts_this_week,
        "group_stats": group_stats,
    }


def get_message_statistics():
    conn = get_db_connection()
    cursor = conn.cursor()

    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ (—Å–æ–æ–±—â–µ–Ω–∏—è —Å iteration > 0)
    cursor.execute("SELECT COUNT(*) FROM messages WHERE iteration > 0")
    total_replies = cursor.fetchone()[0]

    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è
    cursor.execute("SELECT MAX(iteration) FROM messages")
    max_iteration = cursor.fetchone()[0] or 0  # –ï—Å–ª–∏ –∏—Ç–µ—Ä–∞—Ü–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
    iteration_stats = {}
    for i in range(1, max_iteration + 1):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 1, —Ç–∞–∫ –∫–∞–∫ –Ω—É–ª–µ–≤–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è ‚Äî —ç—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        cursor.execute("SELECT COUNT(*) FROM messages WHERE iteration = ?", (i,))
        count = cursor.fetchone()[0]
        iteration_stats[i] = count  # –ö–ª—é—á ‚Äî –Ω–æ–º–µ—Ä –∏—Ç–µ—Ä–∞—Ü–∏–∏, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤

    conn.close()

    return {
        "total_replies": total_replies,
        "iteration_stats": iteration_stats,  # –°–ª–æ–≤–∞—Ä—å: {–∏—Ç–µ—Ä–∞—Ü–∏—è: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤}
    }

    
# ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
def get_message_templates():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM message_templates ORDER BY iteration ASC")
    templates = cursor.fetchall()
    conn.close()
    return templates

# ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
def update_message_template(iteration, message_type, message_content, wait_for_reply, file_path):
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute('''
        INSERT INTO message_templates (iteration, message_type, message_content, wait_for_reply, file_path)
        VALUES (?, ?, ?, ?, ?)
        ON CONFLICT(iteration) DO UPDATE SET 
        message_type = excluded.message_type,
        message_content = excluded.message_content,
        wait_for_reply = excluded.wait_for_reply,
        file_path = excluded.file_path
        video_category = excluded.video_category
    ''', (iteration, message_type, message_content, wait_for_reply, file_path))

    conn.commit()
    conn.close()
    
def add_new_iteration():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO message_templates (message_type, message_content, wait_for_reply) VALUES ('text', '', 0)")
    conn.commit()
    conn.close()

# üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route('/')
def index():
    return render_template('index.html')

# üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
@app.route('/parsing_stats')    
def parsing_stats():    
    stats = get_statistics()
    return render_template('parsing_stats.html', **stats)

# üì© –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@app.route('/message_stats')
def message_stats():
    stats = get_message_statistics()
    return render_template('message_stats.html', **stats)

UPLOAD_FOLDER = "./static/uploads/"
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'mp4', 'mp3', 'wav'}
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (16 MB)

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def get_all_templates():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT iteration, message_type, message_content, wait_for_reply, file_path
        FROM message_templates
        ORDER BY iteration ASC
    ''')
    rows = cursor.fetchall()
    conn.close()
    return rows

def get_single_template(iteration):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT iteration, message_type, message_content, wait_for_reply, file_path
        FROM message_templates
        WHERE iteration=?
    ''', (iteration,))
    row = cursor.fetchone()
    conn.close()
    return row

def create_or_update_template(iteration, message_type, message_content, wait_for_reply, file_path, video_category=None):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO message_templates (iteration, message_type, message_content, wait_for_reply, file_path, video_category)
        VALUES (?, ?, ?, ?, ?, ?)
        ON CONFLICT(iteration) DO UPDATE SET
          message_type = excluded.message_type,
          message_content = excluded.message_content,
          wait_for_reply = excluded.wait_for_reply,
          file_path = excluded.file_path,
          video_category = excluded.video_category
    ''', (iteration, message_type, message_content, wait_for_reply, file_path, video_category))
    conn.commit()
    conn.close()

def delete_template(iteration):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('DELETE FROM message_templates WHERE iteration=?', (iteration,))
    conn.commit()
    conn.close()




@app.route('/parse_settings', methods=['GET', 'POST'])
def parse_settings():
    conn = get_db_connection()
    cursor = conn.cursor()
    if request.method == 'POST':
        action = request.form.get('action')
        if action == 'save_settings':
            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            cursor.execute('DELETE FROM settings')
            conn.commit()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–æ—Ä–º—ã (–¥–æ 5 –Ω–∞–±–æ—Ä–æ–≤ –ø–æ–ª–µ–π)
            for i in range(5):
                link = request.form.get(f'link{i}')
                # –ï—Å–ª–∏ –ø–æ–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ ‚Äì —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                if link:
                    link_type = request.form.get(f'type{i}')
                    if link_type == 'group':
                        group_link = link
                        group_parse_mode = request.form.get(f'parse_mode{i}', 'all_members')
                        min_msgs = request.form.get(f'min_msgs{i}', 1, type=int)
                        channel_link = None
                        channel_parse_mode = None
                        min_discussion_msgs = None
                    else:
                        group_link = None
                        group_parse_mode = None
                        channel_link = link
                        channel_parse_mode = request.form.get(f'parse_mode{i}', 'commentators')
                        min_discussion_msgs = request.form.get(f'min_discussion_msgs{i}', 1, type=int)
                        min_msgs = None

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É settings
                    cursor.execute('''
                        INSERT INTO settings (
                            group_link, channel_link,
                            group_parse_mode, channel_parse_mode,
                            min_msgs, min_discussion_msgs
                        )
                        VALUES (?, ?, ?, ?, ?, ?)
                    ''', (group_link, channel_link, group_parse_mode, channel_parse_mode, min_msgs, min_discussion_msgs))
                    conn.commit()

            flash('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success')
        elif action == 'start_parsing':
            try:
                # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞
                parser_path = os.path.join(os.path.dirname(__file__), 'parser.py')
                subprocess.Popen(['start', 'cmd', '/k', 'python', parser_path], shell=True)
                flash('–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –≤ –Ω–æ–≤–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ!', 'success')
                return redirect(url_for('parsing_stats'))
            except Exception as e:
                flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–µ—Ä–∞: {str(e)}', 'error')
        conn.close()
        return redirect(url_for('parse_settings'))
    conn.close()
    return render_template('parse_settings.html')

# –û—Ç–¥–µ–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@app.route('/settings_history')
def settings_history():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT 
            COALESCE(group_link, channel_link) as link,
            CASE 
                WHEN group_link IS NOT NULL THEN '–ì—Ä—É–ø–ø–∞' 
                ELSE '–ö–∞–Ω–∞–ª' 
            END as type,
            COALESCE(group_parse_mode, channel_parse_mode) as parse_mode,
            min_msgs,
            min_discussion_msgs,
            created_at
        FROM settings
        ORDER BY created_at DESC
    ''')
    history = cursor.fetchall()
    conn.close()
    return render_template('settings_history.html', history=history)






# -- –ü–∞–Ω–µ–ª—å (CRUD) --
@app.route('/build_panel')
def build_panel():
    all_templates = get_all_templates()
    return render_template('build_panel.html', all_templates=all_templates)
        
@app.route('/create_template', methods=['GET', 'POST'])
def create_template():
    if request.method == 'POST':
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –∏–∑ –ë–î
        cursor.execute("SELECT MAX(iteration) FROM message_templates")
        max_iter = cursor.fetchone()[0] or 0
        next_number = max_iter + 1

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
        message_type = request.form.get('message_type', 'text')
        message_content = request.form.get('message_content', '').strip()
        wait_for_reply = 1 if request.form.get('wait_for_reply') else 0

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
        file_path = None
        if message_type != 'text':
            file = request.files.get('file')
            if file and allowed_file(file.filename):
                filename = secure_filename(file.filename)
                local_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
                file.save(local_path)
                file_path = os.path.abspath(local_path)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        create_or_update_template(
            iteration=next_number,
            message_type=message_type,
            message_content=message_content,
            wait_for_reply=wait_for_reply,
            file_path=file_path,
            video_category = request.form.get('video_category')
            
        )
        
        conn.commit()
        conn.close()
        
        flash(f"–°–æ–æ–±—â–µ–Ω–∏–µ ‚Ññ{next_number} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!", "success")
        return redirect(url_for('build_panel'))

    # GET –∑–∞–ø—Ä–æ—Å
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT MAX(iteration) FROM message_templates")
    max_iter = cursor.fetchone()[0] or 0
    next_number = max_iter + 1
    conn.close()
    
    return render_template('edit_template.html', 
                         template_data=None,
                         next_number=next_number)

@app.route('/edit_template/<int:iteration>', methods=['GET', 'POST'])
def edit_template(iteration):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    template_data = get_single_template(iteration)
    
    if not template_data:
        flash("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", "error")
        return redirect(url_for('build_panel'))

    if request.method == 'POST':
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        message_type = request.form.get('message_type', 'text')
        message_content = request.form.get('message_content', '').strip()
        wait_for_reply = 1 if request.form.get('wait_for_reply') else 0
        video_category = request.form.get('video_category')
        file_path = template_data[4]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        new_file = request.files.get('file')
        if new_file and allowed_file(new_file.filename):
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if template_data[4]:
                try:
                    os.remove(template_data[4])
                except Exception as e:
                    flash(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}", "warning")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
            filename = secure_filename(new_file.filename)
            local_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            new_file.save(local_path)
            file_path = os.path.abspath(local_path)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        create_or_update_template(
            iteration=iteration,
            message_type=message_type,
            message_content=message_content,
            wait_for_reply=wait_for_reply,
            file_path=file_path,
            video_category=request.form.get('video_category')
        )

        flash(f"–°–æ–æ–±—â–µ–Ω–∏–µ ‚Ññ{iteration} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", "success")
        return redirect(url_for('build_panel'))

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Row –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    template_dict = {
        'iteration': template_data[0],
        'message_type': template_data[1],
        'message_content': template_data[2],
        'wait_for_reply': template_data[3],
        'file_path': template_data[4],
        'video_category': template_data[5] if template_data[1] == 'video' else None
    }

    return render_template('edit_template.html', 
                         template_data=template_dict,
                         next_number=None)


@app.route('/delete_template/<int:iteration>', methods=['POST'])
def delete_template_route(iteration):
    delete_template(iteration)
    flash(f"–ò—Ç–µ—Ä–∞—Ü–∏—è {iteration} —É–¥–∞–ª–µ–Ω–∞!", "success")
    return redirect(url_for('build_panel'))
# üìä API –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (JSON)
@app.route('/get_stats')
def get_stats():
    stats = get_statistics()
    return jsonify(stats)

@app.route('/sender_bot_settings', methods=['GET', 'POST'])
def sender_bot_settings():
    global parser_process
    if request.method == 'POST':
        start_datetime = request.form.get('start_datetime')
        contacts_count = request.form.get('contacts_count', type=int)
        immediate_start = request.form.get('immediate_start') == 'on'

        conn = get_db_connection()
        cursor = conn.cursor()

        if immediate_start:
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            start_datetime = datetime.now().strftime("%Y-%m-%d %H:%M")
            cursor.execute('''
                INSERT INTO sender_bot_settings (start_datetime, contacts_count)
                VALUES (?, ?)
            ''', (start_datetime, contacts_count))
            cursor.execute("UPDATE sender_status SET status = 'active'")
            flash("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!", "success")
            # –ó–∞–ø—É—Å–∫–∞–µ–º parser.py, –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω
            if parser_process is None or parser_process.poll() is not None:
                parser_process = subprocess.Popen(['python', 'parser.py'],
                                                  creationflags=subprocess.CREATE_NEW_CONSOLE)
        else:
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
            if start_datetime:
                start_time = datetime.strptime(start_datetime, "%Y-%m-%d %H:%M")
                cursor.execute('''
                    INSERT INTO sender_bot_settings (start_datetime, contacts_count)
                    VALUES (?, ?)
                ''', (start_datetime, contacts_count))
                scheduler.add_job(activate_parsing, 'date', run_date=start_time, id='activate_parsing')
                flash(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {start_datetime}!", "success")
            else:
                flash("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ñ–ª–∞–∂–æ–∫ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.", "warning")
                return redirect(url_for('sender_bot_settings'))

        conn.commit()
        conn.close()

        return redirect(url_for('sender_bot_settings'))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞ - –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT start_datetime, contacts_count FROM sender_bot_settings ORDER BY id DESC LIMIT 1')
    settings = cursor.fetchone()
    cursor.execute('SELECT status FROM sender_status LIMIT 1')
    status = cursor.fetchone()
    conn.close()

    return render_template('sender_bot_settings.html', settings=settings, status=status['status'])

def activate_parsing():
    """–§—É–Ω–∫—Ü–∏—è, –∑–∞–ø—É—Å–∫–∞–µ–º–∞—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º, –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ 'active'."""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE sender_status SET status = 'active'")
    conn.commit()
    conn.close()
    print("–ü–∞—Ä—Å–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")

@app.route('/start_parsing', methods=['POST'])
def start_parsing():
    """–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏."""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE sender_status SET status = 'active'")
    conn.commit()
    conn.close()
    global parser_process
    if parser_process is None or parser_process.poll() is not None:
        parser_process = subprocess.Popen(['python', 'parser2.py'],
                                          creationflags=subprocess.CREATE_NEW_CONSOLE)
    return jsonify({"message": "–ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"})

@app.route('/stop_sender', methods=['POST'])
def stop_sender():
    """–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏. –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞ 'idle' –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å parser.py."""
    global parser_process
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE sender_status SET status = 'idle'")
        conn.commit()
        conn.close()

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å parser.py, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
        if parser_process and parser_process.poll() is None:
            parent = psutil.Process(parser_process.pid)
            for child in parent.children(recursive=True):
                child.terminate()
            parent.terminate()
            parser_process = None

        flash("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", "success")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        flash("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ", "danger")
    return redirect(url_for('sender_bot_settings'))

def init_scheduler():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á: –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ, –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É."""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT start_datetime FROM sender_bot_settings ORDER BY id DESC LIMIT 1')
    scheduled_time = cursor.fetchone()
    cursor.execute('SELECT status FROM sender_status LIMIT 1')
    status = cursor.fetchone()
    conn.close()
    if scheduled_time and status['status'] == 'active':
        start_time = datetime.strptime(scheduled_time[0], "%Y-%m-%d %H:%M")
        if start_time > datetime.now():
            scheduler.add_job(activate_parsing, 'date', run_date=start_time, id='activate_parsing')

if __name__ == '__main__':
    init_db()
    init_scheduler()
    app.run(debug=True, host="0.0.0.0", port=5000)