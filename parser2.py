import asyncio
import sqlite3
import logging
import random
import os
from telethon import TelegramClient, events

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

last_sent_iteration = {}  # –ö–ª—é—á: user_id, –∑–Ω–∞—á–µ–Ω–∏–µ: –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–æ–≤ —Å –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
BOTS = [
    {
        "name": "–ë–æ—Ç 1",
        "api_id": 28003573,
        "api_hash": "18f000a0ea5059fa6d22618ca51f0af2",
        "phone": "+6283848520427"
    },
    {
        "name": "–ë–æ—Ç 2",
        "api_id": 12787968,
        "api_hash": "6ebd64c506b792c344d0ee2f9c120368",
        "phone": "+79782944193"
    }
]

# –°–ø–∏—Å–∫–∏ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
GREETING_WORDS = ["–ü—Ä–∏–≤–µ—Ç", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–î–æ–±—Ä—ã–π –¥–µ–Ω—å", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é", "–°–∞–ª—é—Ç", "–•–µ–ª–ª–æ—É"]
EMOJIS = ["üòä", "üëã", "üåü", "üöÄ", "üéØ", "‚ö°Ô∏è", "üî•", "üíé"]

###########################
# –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
###########################

def get_db_connection():
    conn = sqlite3.connect("participants.db")
    conn.row_factory = sqlite3.Row
    return conn

# –°–æ–∑–¥–∞–Ω–∏–µ/–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
def create_tables():
    conn = get_db_connection()
    cur = conn.cursor()
    # –¢–∞–±–ª–∏—Ü–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å ‚Äì –ø–æ–ª–µ–π: iteration, message_type, message_content, wait_for_reply, file_path, (video_category –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    cur.execute('''
        CREATE TABLE IF NOT EXISTS message_templates (
            iteration INTEGER PRIMARY KEY,
            message_type TEXT DEFAULT 'text',
            message_content TEXT DEFAULT NULL,
            wait_for_reply INTEGER DEFAULT 0,
            file_path TEXT DEFAULT NULL,
            video_category TEXT DEFAULT NULL
        )
    ''')
    # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    cur.execute('''
        CREATE TABLE IF NOT EXISTS sender_status (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            status TEXT DEFAULT 'idle',
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π, –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å "idle"
    cur.execute("SELECT COUNT(*) FROM sender_status")
    if cur.fetchone()[0] == 0:
        cur.execute("INSERT INTO sender_status (status) VALUES ('idle')")
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    cur.execute('''
        CREATE TABLE IF NOT EXISTS sent_users (
            user_id TEXT PRIMARY KEY,
            username TEXT
        )
    ''')
    conn.commit()
    conn.close()
    logger.info("–í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")


def get_message_templates():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM message_templates ORDER BY iteration ASC")
    templates = [dict(row) for row in cursor.fetchall()]
    conn.close()
    return templates

def get_sender_status():
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT status FROM sender_status LIMIT 1")
        return cursor.fetchone()["status"]

def update_sender_status(new_status):
    with get_db_connection() as conn:
        conn.execute("UPDATE sender_status SET status = ?", (new_status,))
        conn.commit()
    logger.info(f"–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{new_status}'")

def is_user_sent(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ sent_users."""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT 1 FROM sent_users WHERE user_id = ?", (str(user_id),))
    result = cursor.fetchone()
    conn.close()
    return result is not None

def add_sent_user(user_id, username):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É sent_users, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É."""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO sent_users (user_id, username) VALUES (?, ?)", (str(user_id), username))
    conn.commit()
    conn.close()
    
def save_message(iteration, message_text, user_id=None, username=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É messages."""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO messages (user_id, username, iteration, message_text)
        VALUES (?, ?, ?, ?)
    ''', (user_id, username, iteration, message_text))
    conn.commit()
    conn.close()
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É messages. –ò—Ç–µ—Ä–∞—Ü–∏—è: {iteration}, –¢–µ–∫—Å—Ç: {message_text}")

###########################
# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
###########################

async def send_message_or_file(client, user_id, template):
    message_type = template.get("message_type", "text").lower()
    message_content = template.get("message_content", "")
    file_path = template.get("file_path", "")

    try:
        if message_type == "photo" and file_path:
            abs_path = os.path.abspath(file_path)
            if not os.path.exists(abs_path):
                logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {abs_path}")
                return
            await client.send_file(user_id, abs_path, caption=message_content)
            logger.info(f"–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –§–∞–π–ª: {abs_path}")
        else:
            await client.send_message(user_id, message_content)
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –¢–µ–∫—Å—Ç: {message_content}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        last_sent_iteration[user_id] = template["iteration"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    message_type = template.get("message_type", "text").lower()
    message_content = template.get("message_content", "")
    file_path = template.get("file_path", "")

    try:
        if message_type == "photo" and file_path:
            abs_path = os.path.abspath(file_path)
            if not os.path.exists(abs_path):
                logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {abs_path}")
                return
            await client.send_file(user_id, abs_path, caption=message_content)
            logger.info(f"–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –§–∞–π–ª: {abs_path}")
        else:
            await client.send_message(user_id, message_content)
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –¢–µ–∫—Å—Ç: {message_content}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def wait_for_reply(client, user_id, timeout=300):
    future = asyncio.Future()
    @client.on(events.NewMessage(from_users=user_id))
    async def reply_handler(event):
        if not future.done():
            future.set_result(event.message.message)
        client.remove_event_handler(reply_handler, events.NewMessage)
    try:
        reply = await asyncio.wait_for(future, timeout=timeout)
        return reply
    except asyncio.TimeoutError:
        client.remove_event_handler(reply_handler, events.NewMessage)
        return None

###########################
# –ö–ª–∏–µ–Ω—Ç—ã –¢–µ–ª–µ–≥—Ä–∞–º–∞
###########################

clients = {}  # –°–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ {bot_name: client}
pending_iterations = {}  # –ö–ª—é—á: user_id, –∑–Ω–∞—á–µ–Ω–∏–µ: –∏–Ω–¥–µ–∫—Å —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏

async def ensure_clients():
    for bot in BOTS:
        session_name = f"session_{bot['name']}"
        if bot['name'] not in clients:
            client = TelegramClient(session_name, bot["api_id"], bot["api_hash"])
            await client.start(phone=bot["phone"])
            logger.info(f"{bot['name']} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
            clients[bot['name']] = client
            client.add_event_handler(on_new_message, events.NewMessage)
    return clients

async def on_new_message(event):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = event.message.message

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä –∏—Ç–µ—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0, –µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)
        iteration = last_sent_iteration.get(event.sender_id, 0) if event.sender_id else 0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if event.sender is not None:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ event.sender –Ω–µ —Ä–∞–≤–µ–Ω None
            user_id = event.sender_id
            username = event.sender.username if event.sender.username else f"user_{user_id}"
        else:
            user_id = None
            username = None

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_message(iteration, message_text, user_id, username)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É messages. –ò—Ç–µ—Ä–∞—Ü–∏—è: {iteration}, –¢–µ–∫—Å—Ç: {message_text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return
async def process_pending_message(client, user_id, start_index):
    await asyncio.sleep(20)
    templates = get_message_templates()
    for i in range(start_index, len(templates)):
        template = templates[i]
        await send_message_or_file(client, user_id, template)
        logger.info(f"(pending) –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏—è {template['iteration']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
        if int(template.get("wait_for_reply", 0)) == 1:
            pending_iterations[user_id] = i + 1
            break
        else:
            await asyncio.sleep(5)

###########################
# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞—Å—Å—ã–ª–∫–∏
###########################

async def round_robin_sending():
    await ensure_clients()
    templates = get_message_templates()
    
    while True:
        if get_sender_status() != "active":
            logger.info("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –û–∂–∏–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏...")
            await asyncio.sleep(5)
            continue
        
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT user_id, username FROM users")
            users = [dict(row) for row in cursor.fetchall()]
        
        if not users:
            logger.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(60)
            continue
        
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        
        for idx, user in enumerate(users):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
            if is_user_sent(user["user_id"]):
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['username'] or user['user_id']} —É–∂–µ –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            bot_names = list(clients.keys())
            bot_name = bot_names[idx % len(bot_names)]
            client = clients[bot_name]
            user_identifier = user["username"] or str(user["user_id"])
            logger.info(f"{bot_name} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_identifier}.")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            greeting_message = f"{random.choice(GREETING_WORDS)}! {random.choice(EMOJIS)}"
            try:
                await client.send_message(user_identifier, greeting_message)
                logger.info(f"{bot_name}: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_identifier}.")
            except Exception as e:
                logger.error(f"{bot_name}: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_identifier}: {e}")
            
            # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
            add_sent_user(user["user_id"], user.get("username"))
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Ç–µ—Ä–∞—Ü–∏–π —à–∞–±–ª–æ–Ω–æ–≤
            for i, template in enumerate(templates):
                await send_message_or_file(client, user_identifier, template)
                if int(template.get("wait_for_reply", 0)) == 1:
                    logger.info(f"{bot_name}: –®–∞–±–ª–æ–Ω –∏—Ç–µ—Ä–∞—Ü–∏–∏ {template['iteration']} —Ç—Ä–µ–±—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_identifier}.")
                    pending_iterations[int(user["user_id"])] = i + 1
                    break
                else:
                    await asyncio.sleep(5)
        
        update_sender_status("idle")
        logger.info("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –≤ 'idle'.")
        await asyncio.sleep(5)

async def main():
    await round_robin_sending()

if __name__ == '__main__':
    try:
        create_tables()
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É sent_users, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute('''
            CREATE TABLE IF NOT EXISTS sent_users (
                user_id TEXT PRIMARY KEY,
                username TEXT
            )
        ''')
        conn.commit()
        conn.close()
        logger.info("–¢–∞–±–ª–∏—Ü–∞ sent_users –∏ –¥—Ä—É–≥–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
        
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏...")
