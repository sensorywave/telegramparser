import sqlite3
import telethon
import asyncio
from telethon import TelegramClient, events
from telethon.tl.types import PeerChannel, Channel
from telethon.errors.rpcerrorlist import UserIsBlockedError, UserPrivacyRestrictedError, PeerIdInvalidError
from app import get_db_connection, get_statistics, get_message_statistics
import os
from telethon.errors import FloodWaitError
import time
from datetime import datetime, timedelta
import logging
from app import init_db, get_db_connection, get_statistics, get_message_statistics
# -----------------------------
# –î–ê–ù–ù–´–ï –î–õ–Ø TELETHON
# -----------------------------
api_id = '28003573'
api_hash = '18f000a0ea5059fa6d22618ca51f0af2'
channel_username = "bot_prover"  # –ò–º—è –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –±  –µ–∑ @

client = TelegramClient('session_name', api_id, api_hash)
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)
users_cleared = False


   


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    return sqlite3.connect('participants.db')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def save_users_to_db(users, parse_mode, chat_link):
    global users_cleared  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

    conn = get_db_connection()
    cursor = conn.cursor()

    # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑, –µ—Å–ª–∏ —ç—Ç–æ –µ—â–µ –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ
    if not users_cleared:
        logger.info("–û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã users –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
        cursor.execute("DELETE FROM users")
        conn.commit()
        logger.info("–¢–∞–±–ª–∏—Ü–∞ users —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.")
        users_cleared = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –±–æ–ª—å—à–µ –Ω–µ –æ—á–∏—â–∞—Ç—å

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    cursor.execute('''CREATE TABLE IF NOT EXISTS users
                      (id INTEGER PRIMARY KEY, user_id INTEGER UNIQUE, username TEXT, 
                       first_name TEXT, last_name TEXT, phone TEXT, 
                       parse_mode TEXT, chat_link TEXT)''')
    
    for user in users:
        try:
            cursor.execute('''INSERT OR REPLACE INTO users 
                              (user_id, username, first_name, last_name, phone, parse_mode, chat_link) 
                              VALUES (?, ?, ?, ?, ?, ?, ?)''', 
                           (user.id, user.username, user.first_name, user.last_name, user.phone, parse_mode, chat_link))
            conn.commit()
        except Exception as e:
            conn.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
            continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    conn.close()

# -----------------------------
# –ù–ê–°–¢–†–û–ô–ö–ò –°–û–û–ë–©–ï–ù–ò–ô
# -----------------------------


#### –®–ê–ë–õ–û–ù–´ –°–û–û–ë–©–ï–ù–ò–ô
def get_message_templates():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT iteration, message_type, message_content, wait_for_reply, file_path
        FROM message_templates
        ORDER BY iteration ASC
    """)
    rows = cursor.fetchall()
    conn.close()

    # –ü—Ä–µ–≤—Ä–∞—Ç–∏–º –≤ dict {iteration: {...}, ...}
    templates = {}
    for row in rows:
        iteration, mtype, content, wfr, fpath = row
        templates[iteration] = {
            "type": mtype,
            "content": content if content else "",
            "wait_for_reply": bool(wfr),
            "file_path": fpath
        }
    return templates

# –û–¢–ü–†–ê–í–ö–ê –°–õ–ï–î–£–Æ–©–ï–ô –ò–¢–ï–†–ê–¶–ò–ò
# ----------------------------- 


import os
import asyncio
from telethon.errors import FloodWaitError, UserIsBlockedError, UserPrivacyRestrictedError, PeerIdInvalidError

import asyncio
import random

async def send_next_message(user_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –ª–∏ –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ
    if has_user_received_message(user_id):
        print(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return

    while True:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT iteration FROM messages WHERE user_id=? ORDER BY iteration DESC LIMIT 1", (user_id,))
        last_iteration = cursor.fetchone()
        current_iteration = last_iteration[0] if last_iteration else 0
        conn.close()

        templates = get_message_templates()
        if not templates:
            print(f"üö´ –ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
            return

        # –ò—â–µ–º —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–ø—É—Å—Ç—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é
        next_iteration = None
        for it in sorted(templates.keys()):
            if it > current_iteration:
                tpl = templates[it]
                message_content = tpl["content"]
                if message_content:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
                    next_iteration = it
                    break

        if not next_iteration:
            print(f"üö´ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–∏—Ö –Ω–µ–ø—É—Å—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
            return  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        tpl = templates[next_iteration]
        message_type = tpl["type"]
        message_content = tpl["content"]
        wait_for_reply = tpl["wait_for_reply"]
        file_path = tpl.get("file_path")  # –§–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å None, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω

        print(f"‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é {next_iteration} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (type={message_type}).")

        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ (–µ—Å–ª–∏ –æ–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ)
            parts = message_content.split(". ")  # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Ç–æ—á–∫–∞–º
            if not parts:
                parts = [message_content]

            for part in parts:
                if not part.strip():
                    continue

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
                if file_path is not None and os.path.exists(file_path):
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    await client.send_file(user_id, file_path, caption=part.strip() + ".")
                    print(f"‚úÖ –§–∞–π–ª {file_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {user_id}.")
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await client.send_message(user_id, part.strip() + ".")
                    print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id}.")

                # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏ (–æ—Ç 5 –¥–æ 15 —Å–µ–∫—É–Ω–¥)
                delay = random.randint(5, 15)
                await asyncio.sleep(delay)

            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
            log_message(user_id, message_content, iteration=next_iteration, replied=0)

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Ç 10 –¥–æ 20 —Å–µ–∫—É–Ω–¥)
            final_delay = random.randint(10, 20)
            await asyncio.sleep(final_delay)

            if wait_for_reply:
                break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞

        except FloodWaitError as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ FloodWait: –∂–¥—ë–º {e.seconds} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(e.seconds)  # –ñ–¥—ë–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        except UserIsBlockedError:
            set_user_blocked(user_id)
            print(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª.")
            break
        except UserPrivacyRestrictedError:
            set_user_blocked(user_id)
            print(f"üö´ –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å —É {user_id}.")
            break
        except PeerIdInvalidError:
            set_user_blocked(user_id)
            print(f"üö´ PeerIdInvalidError.")
            break
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {user_id}: {e}")
            break
# -----------------------------
# –ü–†–ò–ú–ï–† –†–ê–°–°–´–õ–ö–ò
#
# -----------------------------
# –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô
# -----------------------------
def has_user_received_message(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–Ω–µ–µ."""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM messages WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()[0]
    conn.close()
    return result > 0

def log_message(user_id, message_text, iteration=None, replied=0):
    """–õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO messages (user_id, message_text, sent_date, final_status, iteration, replied)
        VALUES (?, ?, CURRENT_TIMESTAMP, "pending", ?, ?)
    ''', (user_id, message_text, iteration, replied))
    conn.commit()
    conn.close()
def set_user_blocked(user_id):
    """–û—Ç–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ"""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE messages
        SET final_status = "blocked"
        WHERE user_id = ? AND final_status = "pending"
    ''', (user_id,))
    conn.commit()
    conn.close()

def update_joined_count(user_id):
    """–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –≤—Å—Ç—É–ø–∏–≤—à–µ–≥–æ"""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE messages
        SET final_status = "joined"
        WHERE user_id = ? AND final_status = "pending"
    ''', (user_id,))
    conn.commit()
    conn.close()

def get_joined_count():
    """–ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–∞–Ω–∞–ª"""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM messages WHERE final_status = 'joined'")
    joined_count = cursor.fetchone()[0] or 0
    conn.close()
    return joined_count




def update_parsed_data(group_name, total_members, new_contacts):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤ —Ç–∞–±–ª–∏—Ü–µ parsed_data."""
    conn = get_db_connection()
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏
    today = datetime.now().date()
    start_of_week = today - timedelta(days=today.weekday())  # –ù–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
    cursor.execute("SELECT total_contacts, collected_date FROM parsed_data WHERE group_name = ?", (group_name,))
    result = cursor.fetchone()

    if result:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
        total_contacts, last_collected_date = result
        total_contacts += new_contacts

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ total_contacts –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç total_members
        if total_contacts > total_members:
            total_contacts = total_members

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥–µ–Ω—å –∏ –∑–∞ –Ω–µ–¥–µ–ª—é
        if last_collected_date == today:
            cursor.execute('''
                UPDATE parsed_data
                SET total_contacts = ?,
                    total_members = ?,
                    collected_date = ?,
                    contacts_today = contacts_today + ?,
                    contacts_this_week = contacts_this_week + ?
                WHERE group_name = ?
            ''', (total_contacts, total_members, today, new_contacts, new_contacts, group_name))
        else:
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ —Å–±–æ—Ä–∞ –Ω–µ —Å–µ–≥–æ–¥–Ω—è, –æ–±–Ω—É–ª—è–µ–º contacts_today
            cursor.execute('''
                UPDATE parsed_data
                SET total_contacts = ?,
                    total_members = ?,
                    collected_date = ?,
                    contacts_today = ?,
                    contacts_this_week = contacts_this_week + ?
                WHERE group_name = ?
            ''', (total_contacts, total_members, today, new_contacts, new_contacts, group_name))
    else:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ new_contacts –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç total_members
        if new_contacts > total_members:
            new_contacts = total_members

        cursor.execute('''
            INSERT INTO parsed_data (group_name, total_contacts, total_members, collected_date, contacts_today, contacts_this_week)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (group_name, new_contacts, total_members, today, new_contacts, new_contacts))

    conn.commit()
    conn.close()
    
    
def get_bot_settings():
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT
            send_period,
            contacts_count
        FROM sender_bot_settings
        ORDER BY id DESC
        LIMIT 1
    """)
    row = cursor.fetchone()
    conn.close()

    if row:
        send_period, contacts_count = row
    else:
        send_period = 20 * 60  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 20 –º–∏–Ω—É—Ç
        contacts_count = 100   # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 100 –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤

    return send_period, contacts_count
# -----------------------------
# –§–£–ù–ö–¶–ò–ò –û–¢–ü–†–ê–í–ö–ò/–ü–†–û–í–ï–†–ö–ò
# -----------------------------
async def check_if_user_joined(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å—Ç—É–ø–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–Ω–∞–ª, —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è"""
    await asyncio.sleep(10)
    try:
        channel = await client.get_entity(channel_username)
        participants = await client.get_participants(channel)
        user_ids = {p.id for p in participants}
        if user_id in user_ids:
            update_joined_count(user_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ check_if_user_joined: {e}")

import asyncio
import os
from telethon.tl.types import PeerChannel, Channel
from telethon.errors import UserIsBlockedError, UserPrivacyRestrictedError

"""async def send_message_to_commentators(channel_username):
    –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç–∞–º –∫–∞–Ω–∞–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
    try:
        channel = await client.get_entity(channel_username)
        if not isinstance(channel, (PeerChannel, Channel)):
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª: {channel_username}")
            return

        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        templates = get_message_templates()
        if not templates:
            print("‚ùå –ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        # –ò—â–µ–º –ø–µ—Ä–≤—É—é –Ω–µ–ø—É—Å—Ç—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é
        first_template = None
        for it in sorted(templates.keys()):
            tpl = templates[it]
            message_content = tpl["content"]
            if message_content:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
                first_template = tpl
                break

        if not first_template:
            print("‚ùå –ù–µ—Ç –Ω–µ–ø—É—Å—Ç—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π.")
            return

        message_content = first_template["content"]
        file_path = first_template.get("file_path")  # –§–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å None, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
        messages = await client.get_messages(channel, limit=100)  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π

        # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Å—Ç–∞–≤–∏–≤—à–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        unique_users = set()

        for message in messages:
            if message.replies and message.replies.comments:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                comments = await client.get_messages(channel, reply_to=message.id, limit=message.replies.comments)

                for comment in comments:
                    user = comment.sender_id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π

                    if user is None:
                        continue

                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    unique_users.add(user)  

                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        if has_user_received_message(user):  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é
                            print(f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} —É–∂–µ –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                            continue

                        if file_path and os.path.exists(file_path):
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                            await client.send_file(user, file_path, caption=message_content)
                            print(f"‚úÖ –§–∞–π–ª {file_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}.")
                        else:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            await client.send_message(user, message_content)
                            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}.")

                        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                        log_message(user, message_content)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é

                        # –ó–∞–¥–µ—Ä–∂–∫–∞ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        await asyncio.sleep(10)

                    except UserIsBlockedError:
                        print(f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
                    except UserPrivacyRestrictedError:
                        print(f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø.")
                    except Exception as e:
                        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–Ω–∞–ª–µ –≤ parsed_data
        total_users = len(unique_users)  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        update_parsed_data(channel_username, total_users, total_users)  # –û–±–Ω–æ–≤–ª—è–µ–º parsed_data

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")"""

async def get_discussion_group(channel_link):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞
        channel = await client.get_entity(channel_link)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
        if hasattr(channel, 'linked_chat_id'):
            discussion_group = await client.get_entity(channel.linked_chat_id)
            return discussion_group
        else:
            print(f"–£ –∫–∞–Ω–∞–ª–∞ {channel_link} –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è.")
            return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è: {e}")
        return None
    
    

# -----------------------------
# –ü–ê–†–°–ò–ù–ì –£–ß–ê–°–¢–ù–ò–ö–û–í –ò –ö–û–ú–ú–ï–ù–¢–ê–¢–û–†–û–í



# -----------------------------

async def process_commentators(channel_link, min_comments=0):
    """–ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–æ–≤ –∫–∞–Ω–∞–ª–∞."""
    try:
        channel = await client.get_entity(channel_link)
        logger.info(f"–°—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞ {channel_link} –ø–æ–ª—É—á–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ {channel_link}: {e}")
        return

    commentators = {}
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
        messages = await client.get_messages(channel, limit=100)  # –ú–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        
        for message in messages:
            if message.replies:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
                comments = await client.get_messages(channel, reply_to=message.id)
                for comment in comments:
                    if comment.sender_id:
                        commentators[comment.sender_id] = commentators.get(comment.sender_id, 0) + 1

        # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–æ–≤ –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        active_commentators = [user_id for user_id, count in commentators.items() if count >= min_comments]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        users = []
        for user_id in active_commentators:
            try:
                user = await client.get_entity(user_id)
                users.append(user)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–æ–≤: {len(users)}")
        await save_users_to_db(users, 'commentators', channel_link)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–æ–≤ –∫–∞–Ω–∞–ª–∞ {channel_link}: {e}")
        
        
        
async def get_participants_by_mode(chat_link, parse_mode, min_msgs, channel=False):
    """–ü–∞—Ä—Å–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–∞–Ω–∞–ª–∞ —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–∞."""
    MAX_PARTICIPANTS = 100  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

    try:
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å –¥–ª—è {chat_link}...")
        entity = await client.get_entity(chat_link)
        logger.info(f"–°—É—â–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∞: {entity}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ {chat_link}: {e}")
        return

    if parse_mode == 'all_members':
        logger.info("–†–µ–∂–∏–º: all_members")
        participants = []
        async for user in client.iter_participants(entity, limit=MAX_PARTICIPANTS):
            participants.append(user)
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}")
        await save_users_to_db(participants, parse_mode, chat_link)

    elif parse_mode == 'active_members':
        logger.info("–†–µ–∂–∏–º: active_members")
        messages = await client.get_messages(entity, limit=1000)
        user_msg_count = {}
        for msg in messages:
            if msg.sender_id:
                user_msg_count[msg.sender_id] = user_msg_count.get(msg.sender_id, 0) + 1

        active_ids = [user_id for user_id, count in user_msg_count.items() if count >= min_msgs]
        active_ids = active_ids[:MAX_PARTICIPANTS]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

        participants = []
        for user_id in active_ids:
            try:
                user = await client.get_entity(user_id)
                participants.append(user)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user_id}: {e}")

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}")
        await save_users_to_db(participants, parse_mode, chat_link)
     # –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–æ–≤:
    elif parse_mode == 'commentators' and channel:
       logger.info("–†–µ–∂–∏–º: commentators (–∫–∞–Ω–∞–ª)")
       await process_commentators(chat_link, min_msgs)


    
async def get_discussion_group(channel_link):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞
        channel = await client.get_entity(channel_link)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
        if hasattr(channel, 'linked_chat_id'):
            discussion_group = await client.get_entity(channel.linked_chat_id)
            return discussion_group
        else:
            print(f"–£ –∫–∞–Ω–∞–ª–∞ {channel_link} –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è.")
            return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è: {e}")
        return None


async def parse_discussion_participants(chat_link, min_discussion_msgs, all_participants=True):
    """–ü–∞—Ä—Å–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞."""
    MAX_PARTICIPANTS = 100  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

    try:
        entity = await client.get_entity(chat_link)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ {chat_link}: {e}")
        return

    if hasattr(entity, 'linked_chat_id'):
        try:
            discussion_chat = await client.get_entity(entity.linked_chat_id)
            participants = await client.get_participants(discussion_chat, limit=MAX_PARTICIPANTS)

            if not all_participants:
                logger.info("–ü–∞—Ä—Å–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è")
                messages = await client.get_messages(discussion_chat, limit=1000)
                user_msg_count = {}
                for msg in messages:
                    if msg.sender_id:
                        user_msg_count[msg.sender_id] = user_msg_count.get(msg.sender_id, 0) + 1

                active_ids = [user_id for user_id, count in user_msg_count.items() if count >= min_discussion_msgs]
                participants = [user for user in participants if user.id in active_ids][:MAX_PARTICIPANTS]

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è: {len(participants)}")
            await save_users_to_db(participants, 'discussion', chat_link)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è {chat_link}: {e}")
    else:
        logger.info(f"–£ –∫–∞–Ω–∞–ª–∞ {chat_link} –Ω–µ—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏—è.")


"""async def process_participants(participants, parse_mode, chat_link, max_work_time=None):
    #–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–æ–≤.
    
   
    if not participants:
        print(f"–î–ª—è {chat_link} —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Å—Ç (parse_mode={parse_mode}).")
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    _, contacts_count = get_bot_settings()

    # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª-–≤–æ –∏ –ø–∏—à–µ–º –≤ parsed_data
    total_members = len(participants)
    group_name = chat_link  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É –∫–∞–∫ –∏–º—è
    new_contacts = min(total_members, contacts_count)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ parsed_data
    update_parsed_data(group_name, total_members, new_contacts)

    # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
    start_time = time.time()

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö new_contacts —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    for i, participant in enumerate(participants[:new_contacts]):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        if max_work_time and (time.time() - start_time) > max_work_time:
            print(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã ({max_work_time} —Å–µ–∫—É–Ω–¥). –û—Å—Ç–∞–Ω–æ–≤–∫–∞.")
            break

        # –§–∏–ª—å—Ç—Ä—É–µ–º –±–æ—Ç–æ–≤ –∏ –ø—É—Å—Ç—ã–µ first_name
        if participant.bot or not participant.first_name:
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–∏—Å–∞–ª–∏ –ª–∏ —É–∂–µ
        if has_user_received_message(participant.id):
            continue

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤
            await send_next_message(participant.id)
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            asyncio.create_task(check_if_user_joined(participant.id))

        except UserIsBlockedError:
            set_user_blocked(participant.id)
        except UserPrivacyRestrictedError:
            set_user_blocked(participant.id)
        except PeerIdInvalidError:
            set_user_blocked(participant.id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {participant.id}: {e}")

        # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É 20 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await asyncio.sleep(20)

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if max_work_time and (time.time() - start_time) > max_work_time:
        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è ({max_work_time} —Å–µ–∫—É–Ω–¥).")
    else:
        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—Å–µ {new_contacts} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if max_work_time and (time.time() - start_time) > max_work_time:
        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è ({max_work_time} —Å–µ–∫—É–Ω–¥).")
    else:
        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—Å–µ {new_contacts} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")"""
async def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        cursor.execute("""
            SELECT
                group_link,
                channel_link,
                group_parse_mode,
                channel_parse_mode,
                min_msgs,
                min_discussion_msgs
            FROM settings
            ORDER BY id DESC
        """)
        rows = cursor.fetchall()
        conn.close()

        if rows:
            chat_links = []
            for row in rows:
                group_link, channel_link, group_parse_mode, channel_parse_mode, min_msgs, min_discussion_msgs = row
                if group_link:
                    chat_links.append((group_link, group_parse_mode, min_msgs, False))  # False = –≥—Ä—É–ø–ø–∞
                if channel_link:
                    chat_links.append((channel_link, channel_parse_mode, min_discussion_msgs, True))  # True = –∫–∞–Ω–∞–ª

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(chat_links)} —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.")

            for chat_link, parse_mode, min_msgs, is_channel in chat_links:
                try:
                    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è: {chat_link}, —Ä–µ–∂–∏–º: {parse_mode}")
                    await get_participants_by_mode(chat_link, parse_mode, min_msgs, is_channel)
                    logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ {chat_link} –∑–∞–≤–µ—Ä—à–µ–Ω.")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {chat_link}: {e}")
                    continue  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–µ–π –≥—Ä—É–ø–ø–æ–π/–∫–∞–Ω–∞–ª–æ–º

        else:
            logger.warning("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
    finally:
        logger.info("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        try:
            await client.disconnect()
            logger.info("–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")

async def start():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª."""
    try:
        await client.start()
        logger.info("–ö–ª–∏–µ–Ω—Ç Telethon —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
        await main()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
    finally:
        await client.disconnect()

if __name__ == "__main__":
    asyncio.run(start())